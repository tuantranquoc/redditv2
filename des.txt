When a user posts a message, a JavaScript function will transmit the message over WebSocket to a ChatConsumer. The ChatConsumer will receive that message and forward it to the group corresponding to the room name. Every ChatConsumer in the same group (and thus in the same room) will then receive the message from the group and forward it over WebSocket back to JavaScript, where it will be appended to the chat log.


Tên nhóm chỉ có thể chứa các chữ cái, chữ số, dấu gạch ngang và dấu chấm. Do đó, mã ví dụ này sẽ không thành công trên các tên phòng có các ký tự khác. 

Tên nhóm chỉ được giới hạn ở chữ và số ASCII, dấu gạch nối và dấu chấm câu. Vì mã này tạo tên nhóm trực tiếp từ tên phòng, nó sẽ không thành công nếu tên phòng chứa bất kỳ ký tự nào không hợp lệ trong tên nhóm. 

kidzrancevn

git push -u reddit main

from restframework_simplejwt.tokens import AccessToken

token_str = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX3BrIjoxLCJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiY29sZF9zdHVmZiI6IuKYgyIsImV4cCI6MTIzNDU2LCJqdGkiOiJmZDJmOWQ1ZTFhN2M0MmU4OTQ5MzVlMzYyYmNhOGJjYSJ9.NHlztMGER7UADHZJlxNG0WSi22a2KaYSfd1S-AuT7lU'
access_token = AccessToken(token_str)
user = User.objects.get(access_token['user_id'])

pass token to meessage

https://stackoverflow.com/questions/9735578/building-a-notification-system

https://adriennedomingus.medium.com/sending-notifications-to-a-django-application-using-websockets-d576e5e5acdf

https://stackoverflow.com/questions/55534182/new-chat-message-notification-django-channels

https://blog.osmosys.asia/2017/04/26/design-notification-system/

questions: https://stackoverflow.com/questions/54052596/django-signals-channels-and-transactions

signal to channels layer

We’re gonna make use of the leaky bucket algorithm (which apparently is a very common algorithm for networks to implement) for implementing rate limiting on our websockets.


We'll use both content based filtering and collaborative filtering for "BEST FOR YOU" & "POPULAR AMONG OTHER USER"

now we use collaborative filtering (item - item)



choses item has highest or fresh rating on this user then choese it for recommender list


    .. code-block:: http

        GET  /api/users/alice/accessibles/

adb reverse tcp:8000 tcp:8000
docker run -p 6379:6379 -d redis:5
psql -h testmy.postgres.database.azure.com  -U dongha@testmy -d test < test3Schema.sql

message encrypt in WebSocket

It is wrong. You must first encrypt the message and then send it via a socket.
Please follow the following steps.
1. Pass plain messages between the systems to make sure that your communication is working fine.
2. Encrypt a message on one system and then decrypt it (on the same system) to make sure that your encryption/decryption algorithm is working fine.
Once you are sure that your communication and encryption/decryption is working fine, do the following:
1. Create a message
2. Encrypt it
3. Send the encrypted message
4. Receive the encrypted message on the other end
5. Decrypt the message
I hope it helps.


e, d client < 105 for better precision


not loai bo recent ben front end => dung sort = timestamp

#Create db
az postgres up --resource-group DefaultResourceGroup-SEA --location westus2 --sku-name B_Gen5_1 --server-name social-network --database-name pollsdb --admin-user tuantran --admin-password Dongha2030@ --ssl-enforcement Enabled

#create appservice
az webapp up --resource-group DefaultResourceGroup-SEA --location westus2 --plan DjangoPostgres-tutorial-plan --sku B1 --name k03q

az webapp config appsettings set --resource-group DefaultResourceGroup-SEA --name k03q --settings  DBHOST="social-network" DBNAME="pollsdb" DBUSER="tuantran" DBPASS="Dongha2030@"

res-group: DefaultResourceGroup-SEA
server: social-network 
admin: tuantran
password: Dongha2030@
dbname: pollsdb 
location: westus2 


{
  "connectionStrings": {
    "ado.net": "Server=social-network.postgres.database.azure.com;Database=pollsdb;Port=5432;User Id=tuantran@social-network;Password=Dongha2030@;",
    "jdbc": "jdbc:postgresql://social-network.postgres.database.azure.com:5432/pollsdb?user=tuantran@social-network&password=Dongha2030@",
    "jdbc Spring": "spring.datasource.url=jdbc:postgresql://social-network.postgres.database.azure.com:5432/pollsdb  spring.datasource.username=tuantran@social-network  spring.datasource.password=Dongha2030@",
    "node.js": "var client = new pg.Client('postgres://tuantran@social-network:Dongha2030@@social-network.postgres.database.azure.com:5432/pollsdb');",
    "php": "host=social-network.postgres.database.azure.com port=5432 dbname=pollsdb user=tuantran@social-network password=Dongha2030@",
    "psql_cmd": "psql --host=social-network.postgres.database.azure.com --port=5432 --username=tuantran@social-network --dbname=pollsdb",
    "python": "cnx = psycopg2.connect(database='pollsdb', user='tuantran@social-network', host='social-network.postgres.database.azure.com', password='Dongha2030@', port='5432')",
    "ruby": "cnx = PG::Connection.new(:host => 'social-network.postgres.database.azure.com', :user => 'tuantran@social-network', :dbname => 'pollsdb', :port => '5432', :password => 'Dongha2030@')",        
    "webapp": "Database=pollsdb; Data Source=social-network.postgres.database.azure.com; User Id=tuantran@social-network; Password=Dongha2030@"
  },
  "host": "social-network.postgres.database.azure.com",
  "password": "Dongha2030@",
  "username": "tuantran@social-network"
}


[
  {
    "name": "SCM_DO_BUILD_DURING_DEPLOYMENT",
    "slotSetting": false,
    "value": "True"
  },
  {
    "name": "WEBSITE_HTTPLOGGING_RETENTION_DAYS",
    "slotSetting": false,
    "value": "3"
  },
  {
    "name": "DBHOST",
    "slotSetting": false,
    "value": "social-network"
  },
  {
    "name": "DBNAME",
    "slotSetting": false,
    "value": "pollsdb"
  },
  {
    "name": "DBUSER",
    "slotSetting": false,
    "value": "tuantran"
  },
  {
    "name": "DBPASS",
    "slotSetting": false,
    "value": "Dongha2030@"
  }
]